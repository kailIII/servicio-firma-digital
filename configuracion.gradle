import com.fasterxml.jackson.dataformat.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.3.2'
    }
}

project.ext {
    archivoConfiguracion = 'servicio.yml'
}

task expandirConfig(type: Copy) {
    def hostBaseDeDatos = obtenerValorDesdeVariableDeEntorno("IP_BASE_DATOS_PREPRO", "localhost")
    def passwordBaseDeDatos = obtenerValorDesdeVariableDeEntorno("PASSWORD_BASE_DATOS", "Passw0rd")
    def clave = obtenerValorDesdeVariableDeEntorno("CLAVE_SNIESE_KEY_STORE", "sniese")
    def activarProxyProduccion = obtenerValorDesdeVariableDeEntorno("ACTIVAR_PROXY_PRODUCCION", "false")
    def urlBaseAutorizacion = obtenerValorDesdeVariableDeEntorno("URL_BASE_AUTORIZACION", "https://localhost:8443/")
    def tokenAutenticacionServicio = obtenerValorDesdeVariableDeEntorno("TOKEN_AUTENTICACION_SERVICIOS", "token")
    def cantidadInicialConnexiones = obtenerValorDesdeVariableDeEntorno("CANTIDAD_INICIAL_CONEXIONES", "1")
    def cantidadMinimaConnexiones = obtenerValorDesdeVariableDeEntorno("CANTIDAD_MINIMA_CONEXIONES", "1")
    def cantidadMaximaConnexiones = obtenerValorDesdeVariableDeEntorno("CANTIDAD_MAXIMA_CONEXIONES", "2")


    from('.')
    include('**/*.yml.template')
    include('**/*.ini.template')
    rename { String fileName -> fileName.replace('.template', '') }
    expand(
            host: hostBaseDeDatos,
            passwordBaseDeDatos: passwordBaseDeDatos,
            claveSnieseKeyStore: clave,
            proxyActivo: activarProxyProduccion,
            urlBaseAutorizacion: urlBaseAutorizacion,
            tokenAutenticacionServicio: tokenAutenticacionServicio,
            cantidadInicialConnexiones: cantidadInicialConnexiones,
            cantidadMinimaConnexiones: cantidadMinimaConnexiones,
            cantidadMaximaConnexiones: cantidadMaximaConnexiones
    )
    into('.')
}

task configurarServicio(dependsOn: expandirConfig) {
    doLast {
        def yamlConfig = new Yaml().load(new File(archivoConfiguracion).newReader())
        def dbConfig = yamlConfig.database
        project.ext['flyway.user'] = dbConfig.user
        project.ext['flyway.password'] = dbConfig.password
        project.ext['flyway.url'] = dbConfig.url
        project.ext['flyway.schemas'] = dbConfig.properties.'hibernate.default_schema'
    }
}

def obtenerValorDesdeVariableDeEntorno(key, valorPorDefecto) {
    if (System.getenv(key) != null) {
        return System.getenv(key)
    } else if (this.properties[key] != null) {
        return this.properties[key]
    }
    return valorPorDefecto
}
