import com.fasterxml.jackson.dataformat.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.3.2'
    }
}

project.ext {
    archivoConfiguracion = 'servicio.yml'
}

task expandirConfig(type: Copy) {
    def hostBaseDeDatos = obtenerValorDesdeVariableDeEntorno("IP_BASE_DATOS_PREPRO", "localhost")
    def clave = obtenerValorDesdeVariableDeEntorno("CLAVE_SNIESE_KEY_STORE", "sniese")
    def activarProxyProduccion = obtenerValorDesdeVariableDeEntorno("ACTIVAR_PROXY_PRODUCCION", "false")
    def urlBaseAutorizacion = obtenerValorDesdeVariableDeEntorno("URL_BASE_AUTORIZACION", "https://localhost:8443/")
    def tokenAutenticacionServicio = obtenerValorDesdeVariableDeEntorno("TOKEN_AUTENTICACION_SERVICIOS", "token")
    def cantidadInicialConnexiones = obtenerValorDesdeVariableDeEntorno("CANTIDAD_INICIAL_CONEXIONES", "1")
    def cantidadMinimaConnexiones = obtenerValorDesdeVariableDeEntorno("CANTIDAD_MINIMA_CONEXIONES", "1")
    def cantidadMaximaConnexiones = obtenerValorDesdeVariableDeEntorno("CANTIDAD_MAXIMA_CONEXIONES", "2")
    def metricas = obtenerValorDesdeVariableDeEntorno("METRICAS", "false")
    def metricasHost = obtenerValorDesdeVariableDeEntorno("IP_METRICAS", "localhost")
    def metricasPuerto = obtenerValorDesdeVariableDeEntorno("PUERTO_METRICAS", "2003")
    def configuracionMetricas = ""

    if(metricas.equals("true")){
        configuracionMetricas = "metrics:\n" +
                "  frequency: 5 seconds\n" +
                "  reporters:\n" +
                "    - type: graphite\n" +
                "      host: ${metricasHost}\n" +
                "      port: ${metricasPuerto}\n" +
                "      excludes:\n" +
                "        - jvm.buffers.direct.count\n" +
                "        - jvm.buffers.direct.capacity\n" +
                "        - jvm.buffers.direct.used\n" +
                "        - jvm.buffers.mapped.capacity\n" +
                "        - jvm.buffers.mapped.count\n" +
                "        - jvm.buffers.mapped.used\n" +
                "        - jvm.gc.PS-MarkSweep.count\n" +
                "        - jvm.gc.PS-MarkSweep.time\n" +
                "        - jvm.gc.PS-Scavenge.count\n" +
                "        - jvm.gc.PS-Scavenge.time\n" +
                "        - jvm.memory.heap.committed\n" +
                "        - jvm.memory.heap.init\n" +
                "        - jvm.memory.heap.max\n" +
                "        - jvm.memory.heap.usage\n" +
                "        - jvm.memory.heap.used\n" +
                "        - jvm.memory.non-heap.committed\n" +
                "        - jvm.memory.non-heap.init\n" +
                "        - jvm.memory.non-heap.max\n" +
                "        - jvm.memory.non-heap.usage\n" +
                "        - jvm.memory.non-heap.used\n" +
                "        - jvm.memory.pools.Code-Cache.usage\n" +
                "        - jvm.memory.pools.Compressed-Class-Space.usage\n" +
                "        - jvm.memory.pools.Metaspace.usage\n" +
                "        - jvm.memory.pools.PS-Eden-Space.usage\n" +
                "        - jvm.memory.pools.PS-Old-Gen.usage\n" +
                "        - jvm.memory.pools.PS-Survivor-Space.usage\n" +
                "        - jvm.memory.total.committed\n" +
                "        - jvm.memory.total.init\n" +
                "        - jvm.memory.total.max\n" +
                "        - jvm.memory.total.used\n" +
                "        - jvm.threads.blocked.count\n" +
                "        - jvm.threads.count\n" +
                "        - jvm.threads.daemon.count\n" +
                "        - jvm.threads.deadlocks\n" +
                "        - jvm.threads.new.count\n" +
                "        - jvm.threads.runnable.count\n" +
                "        - jvm.threads.terminated.count\n" +
                "        - jvm.threads.timed_waiting.count\n" +
                "        - jvm.threads.waiting.count\n" +
                "        - org.eclipse.jetty.util.thread.QueuedThreadPool.dw.jobs\n" +
                "        - org.eclipse.jetty.util.thread.QueuedThreadPool.dw.size\n" +
                "        - org.eclipse.jetty.util.thread.QueuedThreadPool.dw.utilization\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.active-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.active-suspended\n" +
                "        - ch.qos.logback.core.Appender.all\n" +
                "        - ch.qos.logback.core.Appender.debug\n" +
                "        - ch.qos.logback.core.Appender.error\n" +
                "        - ch.qos.logback.core.Appender.info\n" +
                "        - ch.qos.logback.core.Appender.trace\n" +
                "        - ch.qos.logback.core.Appender.warn\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.1xx-responses\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.2xx-responses\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.3xx-responses\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.4xx-responses\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.5xx-responses\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.async-dispatches\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.async-timeouts\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.connect-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.delete-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.get-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.head-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.move-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.options-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.other-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.post-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.put-requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.requests\n" +
                "        - io.dropwizard.jetty.MutableServletContextHandler.trace-requests\n" +
                "        - org.eclipse.jetty.server.HttpConnectionFactory.8458.connections\n" +
                "        - org.eclipse.jetty.server.HttpConnectionFactory.8108.connections\n" +
                "        - org.eclipse.jetty.server.HttpConnectionFactory.8457.connections\n" +
                "      durationUnit: seconds\n" +
                "      rateUnit: minutes\n" +
                "      prefix: servicio-firma-digital"
    }

    from('.')
    include('**/*.yml.template')
    include('**/*.ini.template')
    rename { String fileName -> fileName.replace('.template', '') }
    expand(
            host: hostBaseDeDatos,
            claveSnieseKeyStore: clave,
            proxyActivo: activarProxyProduccion,
            urlBaseAutorizacion: urlBaseAutorizacion,
            tokenAutenticacionServicio: tokenAutenticacionServicio,
            cantidadInicialConnexiones: cantidadInicialConnexiones,
            cantidadMinimaConnexiones: cantidadMinimaConnexiones,
            cantidadMaximaConnexiones: cantidadMaximaConnexiones,
            metricasHost: metricasHost,
            metricasPuerto: metricasPuerto,
            configuracionMetricas: configuracionMetricas
    )
    into('.')
}

task configurarServicio(dependsOn: expandirConfig) {
    doLast {
        def yamlConfig = new Yaml().load(new File(archivoConfiguracion).newReader())
        def dbConfig = yamlConfig.database
        project.ext['flyway.user'] = dbConfig.user
        project.ext['flyway.password'] = dbConfig.password
        project.ext['flyway.url'] = dbConfig.url
        project.ext['flyway.schemas'] = dbConfig.properties.'hibernate.default_schema'
    }
}

def obtenerValorDesdeVariableDeEntorno(key, valorPorDefecto) {
    if (System.getenv(key) != null) {
        return System.getenv(key)
    } else if (this.properties[key] != null) {
        return this.properties[key]
    }
    return valorPorDefecto
}
